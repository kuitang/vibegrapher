============================= test session starts ==============================
platform linux -- Python 3.11.2, pytest-8.3.4, pluggy-1.6.0 -- /home/kuitang/git/vibegrapher/backend/.venv/bin/python
cachedir: .pytest_cache
rootdir: /home/kuitang/git/vibegrapher/backend
configfile: pyproject.toml
plugins: cov-6.0.0, asyncio-0.25.2, anyio-4.10.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function
collecting ... collected 1 item

tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission Starting isolated test server:
  Database: /tmp/test_vibegrapher_5c57e192.db
  Port: 53101
  Media: /tmp/test_media_5c57e192
Database reset and seeded successfully at: sqlite:////tmp/test_vibegrapher_5c57e192.db
Created project 'Agent Triage System' with git repository
Repository path: media/projects/agent-triage-system
Initial commit: 34838760098a0a651ac03ffb9690b45274331567
Created 2 test cases (1 regular, 1 quick test)
Test server ready at http://127.0.0.1:53101
Running: vibecode with patch prompt
Result: patch=False, diff_id=None
Token usage: {'total_tokens': 0}
Expected: patch should be created
FAILEDCleaning up test server...


=================================== FAILURES ===================================
________________________ test_vibecode_patch_submission ________________________

test_server = {'media_path': '/tmp/test_media_5c57e192', 'test_id': '5c57e192', 'url': 'http://127.0.0.1:53101'}
caplog = <_pytest.logging.LogCaptureFixture object at 0xffffabd96c50>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_vibecode_patch_submission(test_server: dict, caplog: Any) -> None:
        """Test vibecode with patch submission using REAL OpenAI API"""
    
        # Set API key for test
        os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY", "")
        if not os.environ["OPENAI_API_KEY"]:
            pytest.skip("OPENAI_API_KEY not set")
    
        caplog.set_level(logging.INFO)
    
        async with httpx.AsyncClient(base_url=test_server["url"], timeout=30.0) as client:
            # Create project
            project_resp = await client.post("/projects", json={"name": "Test Agent Project"})
            assert project_resp.status_code == 201
            project = project_resp.json()
    
            # Create session
            session_resp = await client.post(f"/projects/{project['id']}/sessions")
            assert session_resp.status_code == 201
            session = session_resp.json()
    
            # Send vibecode request - simple patch that should succeed
            message_resp = await client.post(
                f"/sessions/{session['id']}/messages",
                json={"prompt": "Add a comment at the top saying '# Modified by AI'"}
            )
            assert message_resp.status_code == 200
            result = message_resp.json()
    
            print(f"Running: vibecode with patch prompt")
            print(f"Result: patch={bool(result.get('patch'))}, diff_id={result.get('diff_id')}")
            print(f"Token usage: {result.get('token_usage', {})}")
            print(f"Expected: patch should be created")
    
            # Verify response
            assert result.get("error") is None, f"Error: {result.get('error')}"
>           assert result.get("diff_id") or result.get("patch"), "Should have diff_id or patch"
E           AssertionError: Should have diff_id or patch
E           assert (None or None)
E            +  where None = <built-in method get of dict object at 0xffffabbc9b00>('diff_id')
E            +    where <built-in method get of dict object at 0xffffabbc9b00> = {'content': 'I attempted to submit the patch, but it didn’t go through due to a tool issue.\n\nHere’s the exact change needed:\n- Create or edit the file (e.g., script.py) and add this as the first line:\n  # Modified by AI\n\nIf you share the target filename, I can re-submit the patch specifically for that file.', 'diff_id': None, 'error': None, 'patch': None, ...}.get
E            +  and   None = <built-in method get of dict object at 0xffffabbc9b00>('patch')
E            +    where <built-in method get of dict object at 0xffffabbc9b00> = {'content': 'I attempted to submit the patch, but it didn’t go through due to a tool issue.\n\nHere’s the exact change needed:\n- Create or edit the file (e.g., script.py) and add this as the first line:\n  # Modified by AI\n\nIf you share the target filename, I can re-submit the patch specifically for that file.', 'diff_id': None, 'error': None, 'patch': None, ...}.get

tests/integration/test_phase_004_agents.py:75: AssertionError
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:53101/projects "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:53101/projects/fe075960-279b-4abd-837e-e2b7908eec8f/sessions "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:53101/sessions/5ba6387a-999d-42a4-b0a4-8b119d57e4b6/messages "HTTP/1.1 200 OK"
=============================== warnings summary ===============================
.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
  /home/kuitang/git/vibegrapher/backend/.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

tests/integration/test_phase_004_agents.py:37
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:37: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:94
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:94: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:132
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:132: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:175
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:175: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:234
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:234: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:247
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:247: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
======================== 1 failed, 7 warnings in 14.27s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.2, pytest-8.3.4, pluggy-1.6.0 -- /home/kuitang/git/vibegrapher/backend/.venv/bin/python
cachedir: .pytest_cache
rootdir: /home/kuitang/git/vibegrapher/backend
configfile: pyproject.toml
plugins: cov-6.0.0, asyncio-0.25.2, anyio-4.10.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function
collecting ... collected 1 item

tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission Starting isolated test server:
  Database: /tmp/test_vibegrapher_95ece10f.db
  Port: 54585
  Media: /tmp/test_media_95ece10f
Database reset and seeded successfully at: sqlite:////tmp/test_vibegrapher_95ece10f.db
Created project 'Agent Triage System' with git repository
Repository path: media/projects/agent-triage-system
Initial commit: 91cd3be31c00bf98f5677ac4a2148dab16b04e69
Created 2 test cases (1 regular, 1 quick test)
Test server ready at http://127.0.0.1:54585
FAILEDCleaning up test server...


=================================== FAILURES ===================================
________________________ test_vibecode_patch_submission ________________________

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        global HTTPCORE_EXC_MAP
        if len(HTTPCORE_EXC_MAP) == 0:
            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()
        try:
>           yield

.venv/lib/python3.11/site-packages/httpx/_transports/default.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.11/site-packages/httpx/_transports/default.py:394: in handle_async_request
    resp = await self._pool.handle_async_request(req)
.venv/lib/python3.11/site-packages/httpcore/_async/connection_pool.py:256: in handle_async_request
    raise exc from None
.venv/lib/python3.11/site-packages/httpcore/_async/connection_pool.py:236: in handle_async_request
    response = await connection.handle_async_request(
.venv/lib/python3.11/site-packages/httpcore/_async/connection.py:103: in handle_async_request
    return await self._connection.handle_async_request(request)
.venv/lib/python3.11/site-packages/httpcore/_async/http11.py:136: in handle_async_request
    raise exc
.venv/lib/python3.11/site-packages/httpcore/_async/http11.py:106: in handle_async_request
    ) = await self._receive_response_headers(**kwargs)
.venv/lib/python3.11/site-packages/httpcore/_async/http11.py:177: in _receive_response_headers
    event = await self._receive_event(timeout=timeout)
.venv/lib/python3.11/site-packages/httpcore/_async/http11.py:217: in _receive_event
    data = await self._network_stream.read(
.venv/lib/python3.11/site-packages/httpcore/_backends/anyio.py:32: in read
    with map_exceptions(exc_map):
/usr/lib/python3.11/contextlib.py:155: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

map = {<class 'TimeoutError'>: <class 'httpcore.ReadTimeout'>, <class 'anyio.BrokenResourceError'>: <class 'httpcore.ReadErr... 'anyio.ClosedResourceError'>: <class 'httpcore.ReadError'>, <class 'anyio.EndOfStream'>: <class 'httpcore.ReadError'>}

    @contextlib.contextmanager
    def map_exceptions(map: ExceptionMapping) -> typing.Iterator[None]:
        try:
            yield
        except Exception as exc:  # noqa: PIE786
            for from_exc, to_exc in map.items():
                if isinstance(exc, from_exc):
>                   raise to_exc(exc) from exc
E                   httpcore.ReadTimeout

.venv/lib/python3.11/site-packages/httpcore/_exceptions.py:14: ReadTimeout

The above exception was the direct cause of the following exception:

test_server = {'media_path': '/tmp/test_media_95ece10f', 'test_id': '95ece10f', 'url': 'http://127.0.0.1:54585'}
caplog = <_pytest.logging.LogCaptureFixture object at 0xffffba7858d0>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_vibecode_patch_submission(test_server: dict, caplog: Any) -> None:
        """Test vibecode with patch submission using REAL OpenAI API"""
    
        # Set API key for test
        os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY", "")
        if not os.environ["OPENAI_API_KEY"]:
            pytest.skip("OPENAI_API_KEY not set")
    
        caplog.set_level(logging.INFO)
    
        async with httpx.AsyncClient(base_url=test_server["url"], timeout=30.0) as client:
            # Create project
            project_resp = await client.post("/projects", json={"name": "Test Agent Project"})
            assert project_resp.status_code == 201
            project = project_resp.json()
    
            # Create session
            session_resp = await client.post(f"/projects/{project['id']}/sessions")
            assert session_resp.status_code == 201
            session = session_resp.json()
    
            # Send vibecode request - simple patch that should succeed
>           message_resp = await client.post(
                f"/sessions/{session['id']}/messages",
                json={"prompt": "Add a comment at the top saying '# Modified by AI'"}
            )

tests/integration/test_phase_004_agents.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.11/site-packages/httpx/_client.py:1859: in post
    return await self.request(
.venv/lib/python3.11/site-packages/httpx/_client.py:1540: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv/lib/python3.11/site-packages/httpx/_client.py:1629: in send
    response = await self._send_handling_auth(
.venv/lib/python3.11/site-packages/httpx/_client.py:1657: in _send_handling_auth
    response = await self._send_handling_redirects(
.venv/lib/python3.11/site-packages/httpx/_client.py:1694: in _send_handling_redirects
    response = await self._send_single_request(request)
.venv/lib/python3.11/site-packages/httpx/_client.py:1730: in _send_single_request
    response = await transport.handle_async_request(request)
.venv/lib/python3.11/site-packages/httpx/_transports/default.py:393: in handle_async_request
    with map_httpcore_exceptions():
/usr/lib/python3.11/contextlib.py:155: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @contextlib.contextmanager
    def map_httpcore_exceptions() -> typing.Iterator[None]:
        global HTTPCORE_EXC_MAP
        if len(HTTPCORE_EXC_MAP) == 0:
            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
>           raise mapped_exc(message) from exc
E           httpx.ReadTimeout

.venv/lib/python3.11/site-packages/httpx/_transports/default.py:118: ReadTimeout
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:54585/projects "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:54585/projects/5964a829-caff-4c59-b937-17bfb347a767/sessions "HTTP/1.1 201 Created"
=============================== warnings summary ===============================
.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
  /home/kuitang/git/vibegrapher/backend/.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

tests/integration/test_phase_004_agents.py:37
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:37: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:94
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:94: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:132
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:132: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:175
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:175: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:234
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:234: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:247
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:247: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
======================== 1 failed, 7 warnings in 37.24s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.2, pytest-8.3.4, pluggy-1.6.0 -- /home/kuitang/git/vibegrapher/backend/.venv/bin/python
cachedir: .pytest_cache
rootdir: /home/kuitang/git/vibegrapher/backend
configfile: pyproject.toml
plugins: cov-6.0.0, asyncio-0.25.2, anyio-4.10.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function
collecting ... collected 1 item

tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission Starting isolated test server:
  Database: /tmp/test_vibegrapher_37d0c349.db
  Port: 38999
  Media: /tmp/test_media_37d0c349
Database reset and seeded successfully at: sqlite:////tmp/test_vibegrapher_37d0c349.db
Created project 'Agent Triage System' with git repository
Repository path: media/projects/agent-triage-system
Initial commit: 7e1beb169df61ee02a867f0e967da22307d5a194
Created 2 test cases (1 regular, 1 quick test)
Test server ready at http://127.0.0.1:38999
Running: vibecode with patch prompt
Result: patch=False, diff_id=None
Token usage: {'total_tokens': 0}
Expected: patch should be created
FAILEDCleaning up test server...


=================================== FAILURES ===================================
________________________ test_vibecode_patch_submission ________________________

test_server = {'media_path': '/tmp/test_media_37d0c349', 'test_id': '37d0c349', 'url': 'http://127.0.0.1:38999'}
caplog = <_pytest.logging.LogCaptureFixture object at 0xffffb8456510>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_vibecode_patch_submission(test_server: dict, caplog: Any) -> None:
        """Test vibecode with patch submission using REAL OpenAI API"""
    
        # Set API key for test
        os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY", "")
        if not os.environ["OPENAI_API_KEY"]:
            pytest.skip("OPENAI_API_KEY not set")
    
        caplog.set_level(logging.INFO)
    
        async with httpx.AsyncClient(base_url=test_server["url"], timeout=60.0) as client:
            # Create project
            project_resp = await client.post("/projects", json={"name": "Test Agent Project"})
            assert project_resp.status_code == 201
            project = project_resp.json()
    
            # Create session
            session_resp = await client.post(f"/projects/{project['id']}/sessions")
            assert session_resp.status_code == 201
            session = session_resp.json()
    
            # Send vibecode request - simple patch that should succeed
            message_resp = await client.post(
                f"/sessions/{session['id']}/messages",
                json={"prompt": "Add a comment at the top saying '# Modified by AI'"}
            )
            assert message_resp.status_code == 200
            result = message_resp.json()
    
            print(f"Running: vibecode with patch prompt")
            print(f"Result: patch={bool(result.get('patch'))}, diff_id={result.get('diff_id')}")
            print(f"Token usage: {result.get('token_usage', {})}")
            print(f"Expected: patch should be created")
    
            # Verify response
>           assert result.get("error") is None, f"Error: {result.get('error')}"
E           AssertionError: Error: Max iterations reached without approval
E           assert 'Max iterations reached without approval' is None
E            +  where 'Max iterations reached without approval' = <built-in method get of dict object at 0xffffb8286800>('error')
E            +    where <built-in method get of dict object at 0xffffb8286800> = {'content': None, 'diff_id': None, 'error': 'Max iterations reached without approval', 'patch': None, ...}.get

tests/integration/test_phase_004_agents.py:74: AssertionError
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:38999/projects "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:38999/projects/c81f299f-f5a7-4a40-a4b4-36f13abf1cd9/sessions "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:38999/sessions/e9fa9e58-c21e-47fc-af65-5de1f7739a7e/messages "HTTP/1.1 200 OK"
=============================== warnings summary ===============================
.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
  /home/kuitang/git/vibegrapher/backend/.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

tests/integration/test_phase_004_agents.py:37
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:37: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:94
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:94: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:132
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:132: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:175
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:175: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:234
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:234: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:247
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:247: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
======================== 1 failed, 7 warnings in 45.20s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.2, pytest-8.3.4, pluggy-1.6.0 -- /home/kuitang/git/vibegrapher/backend/.venv/bin/python
cachedir: .pytest_cache
rootdir: /home/kuitang/git/vibegrapher/backend
configfile: pyproject.toml
plugins: cov-6.0.0, asyncio-0.25.2, anyio-4.10.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function
collecting ... collected 1 item

tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission Starting isolated test server:
  Database: /tmp/test_vibegrapher_c1e69bf9.db
  Port: 41331
  Media: /tmp/test_media_c1e69bf9
Database reset and seeded successfully at: sqlite:////tmp/test_vibegrapher_c1e69bf9.db
Created project 'Agent Triage System' with git repository
Repository path: media/projects/agent-triage-system
Initial commit: 8df1b5945d7ebbcf4e847c5119e8631eaf843236
Created 2 test cases (1 regular, 1 quick test)
Test server ready at http://127.0.0.1:41331
Running: vibecode with patch prompt
Result: patch=False, diff_id=None
Token usage: {'total_tokens': 0}
Expected: patch should be created
FAILEDCleaning up test server...


=================================== FAILURES ===================================
________________________ test_vibecode_patch_submission ________________________

test_server = {'media_path': '/tmp/test_media_c1e69bf9', 'test_id': 'c1e69bf9', 'url': 'http://127.0.0.1:41331'}
caplog = <_pytest.logging.LogCaptureFixture object at 0xffff98ca62d0>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_vibecode_patch_submission(test_server: dict, caplog: Any) -> None:
        """Test vibecode with patch submission using REAL OpenAI API"""
    
        # Set API key for test
        os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY", "")
        if not os.environ["OPENAI_API_KEY"]:
            pytest.skip("OPENAI_API_KEY not set")
    
        caplog.set_level(logging.INFO)
    
        async with httpx.AsyncClient(base_url=test_server["url"], timeout=60.0) as client:
            # Create project
            project_resp = await client.post("/projects", json={"name": "Test Agent Project"})
            assert project_resp.status_code == 201
            project = project_resp.json()
    
            # Create session
            session_resp = await client.post(f"/projects/{project['id']}/sessions")
            assert session_resp.status_code == 201
            session = session_resp.json()
    
            # Send vibecode request - simple patch that should succeed
            message_resp = await client.post(
                f"/sessions/{session['id']}/messages",
                json={"prompt": "Add a comment at the top saying '# Modified by AI'"}
            )
            assert message_resp.status_code == 200
            result = message_resp.json()
    
            print(f"Running: vibecode with patch prompt")
            print(f"Result: patch={bool(result.get('patch'))}, diff_id={result.get('diff_id')}")
            print(f"Token usage: {result.get('token_usage', {})}")
            print(f"Expected: patch should be created")
    
            # Verify response
>           assert result.get("error") is None, f"Error: {result.get('error')}"
E           AssertionError: Error: Max iterations reached without approval
E           assert 'Max iterations reached without approval' is None
E            +  where 'Max iterations reached without approval' = <built-in method get of dict object at 0xffff98ad9980>('error')
E            +    where <built-in method get of dict object at 0xffff98ad9980> = {'content': None, 'diff_id': None, 'error': 'Max iterations reached without approval', 'patch': None, ...}.get

tests/integration/test_phase_004_agents.py:74: AssertionError
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:41331/projects "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:41331/projects/15b7e69a-3c47-4a91-8c1e-3005e0dcaa8b/sessions "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:41331/sessions/37390a61-4b62-4313-8e90-8b0cc3e21274/messages "HTTP/1.1 200 OK"
=============================== warnings summary ===============================
.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
  /home/kuitang/git/vibegrapher/backend/.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

tests/integration/test_phase_004_agents.py:37
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:37: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:94
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:94: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:132
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:132: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:175
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:175: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:234
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:234: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:247
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:247: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
======================== 1 failed, 7 warnings in 48.77s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.2, pytest-8.3.4, pluggy-1.6.0 -- /home/kuitang/git/vibegrapher/backend/.venv/bin/python
cachedir: .pytest_cache
rootdir: /home/kuitang/git/vibegrapher/backend
configfile: pyproject.toml
plugins: cov-6.0.0, asyncio-0.25.2, anyio-4.10.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function
collecting ... collected 1 item

tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission Starting isolated test server:
  Database: /tmp/test_vibegrapher_1d1043b6.db
  Port: 60151
  Media: /tmp/test_media_1d1043b6
Database reset and seeded successfully at: sqlite:////tmp/test_vibegrapher_1d1043b6.db
Created project 'Agent Triage System' with git repository
Repository path: media/projects/agent-triage-system
Initial commit: 67f7135ec144c4753fe8c3273cd8e285d7679b33
Created 2 test cases (1 regular, 1 quick test)
Test server ready at http://127.0.0.1:60151
Running: vibecode with patch prompt
Result: patch=False, diff_id=None
Token usage: {'total_tokens': 0}
Expected: patch should be created
FAILEDCleaning up test server...


=================================== FAILURES ===================================
________________________ test_vibecode_patch_submission ________________________

test_server = {'media_path': '/tmp/test_media_1d1043b6', 'test_id': '1d1043b6', 'url': 'http://127.0.0.1:60151'}
caplog = <_pytest.logging.LogCaptureFixture object at 0xffff846163d0>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_vibecode_patch_submission(test_server: dict, caplog: Any) -> None:
        """Test vibecode with patch submission using REAL OpenAI API"""
    
        # Set API key for test
        os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY", "")
        if not os.environ["OPENAI_API_KEY"]:
            pytest.skip("OPENAI_API_KEY not set")
    
        caplog.set_level(logging.INFO)
    
        async with httpx.AsyncClient(base_url=test_server["url"], timeout=60.0) as client:
            # Create project
            project_resp = await client.post("/projects", json={"name": "Test Agent Project"})
            assert project_resp.status_code == 201
            project = project_resp.json()
    
            # Create session
            session_resp = await client.post(f"/projects/{project['id']}/sessions")
            assert session_resp.status_code == 201
            session = session_resp.json()
    
            # Send vibecode request - simple patch that should succeed
            message_resp = await client.post(
                f"/sessions/{session['id']}/messages",
                json={"prompt": "Add a comment at the top saying '# Modified by AI'"}
            )
            assert message_resp.status_code == 200
            result = message_resp.json()
    
            print(f"Running: vibecode with patch prompt")
            print(f"Result: patch={bool(result.get('patch'))}, diff_id={result.get('diff_id')}")
            print(f"Token usage: {result.get('token_usage', {})}")
            print(f"Expected: patch should be created")
    
            # Verify response
>           assert result.get("error") is None, f"Error: {result.get('error')}"
E           AssertionError: Error: Max iterations reached without approval
E           assert 'Max iterations reached without approval' is None
E            +  where 'Max iterations reached without approval' = <built-in method get of dict object at 0xffff84449b40>('error')
E            +    where <built-in method get of dict object at 0xffff84449b40> = {'content': None, 'diff_id': None, 'error': 'Max iterations reached without approval', 'patch': None, ...}.get

tests/integration/test_phase_004_agents.py:74: AssertionError
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:60151/projects "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:60151/projects/54602cfd-38dd-4cab-8056-61ffb2220045/sessions "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:60151/sessions/1d19cf1d-a433-44df-8400-9365f221a30c/messages "HTTP/1.1 200 OK"
=============================== warnings summary ===============================
.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
  /home/kuitang/git/vibegrapher/backend/.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

tests/integration/test_phase_004_agents.py:37
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:37: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:94
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:94: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:132
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:132: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:175
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:175: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:234
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:234: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:247
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:247: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
======================== 1 failed, 7 warnings in 47.51s ========================
============================= test session starts ==============================
platform linux -- Python 3.11.2, pytest-8.3.4, pluggy-1.6.0 -- /home/kuitang/git/vibegrapher/backend/.venv/bin/python
cachedir: .pytest_cache
rootdir: /home/kuitang/git/vibegrapher/backend
configfile: pyproject.toml
plugins: cov-6.0.0, asyncio-0.25.2, anyio-4.10.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function
collecting ... collected 1 item

tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission Starting isolated test server:
  Database: /tmp/test_vibegrapher_fe1664a6.db
  Port: 43777
  Media: /tmp/test_media_fe1664a6
Database reset and seeded successfully at: sqlite:////tmp/test_vibegrapher_fe1664a6.db
Created project 'Agent Triage System' with git repository
Repository path: media/projects/agent-triage-system
Initial commit: 4b4d9a3a9910216753ccfec535c84d5f9c12543c
Created 2 test cases (1 regular, 1 quick test)
Test server ready at http://127.0.0.1:43777
Running: vibecode with patch prompt
Result: patch=False, diff_id=None
Token usage: {'total_tokens': 0}
Expected: patch should be created
FAILEDCleaning up test server...


=================================== FAILURES ===================================
________________________ test_vibecode_patch_submission ________________________

test_server = {'media_path': '/tmp/test_media_fe1664a6', 'test_id': 'fe1664a6', 'url': 'http://127.0.0.1:43777'}
caplog = <_pytest.logging.LogCaptureFixture object at 0xffff96695d10>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_vibecode_patch_submission(test_server: dict, caplog: Any) -> None:
        """Test vibecode with patch submission using REAL OpenAI API"""
    
        # Set API key for test
        os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY", "")
        if not os.environ["OPENAI_API_KEY"]:
            pytest.skip("OPENAI_API_KEY not set")
    
        caplog.set_level(logging.INFO)
    
        async with httpx.AsyncClient(base_url=test_server["url"], timeout=60.0) as client:
            # Create project
            project_resp = await client.post("/projects", json={"name": "Test Agent Project"})
            assert project_resp.status_code == 201
            project = project_resp.json()
    
            # Create session
            session_resp = await client.post(f"/projects/{project['id']}/sessions")
            assert session_resp.status_code == 201
            session = session_resp.json()
    
            # Send vibecode request - simple patch that should succeed
            message_resp = await client.post(
                f"/sessions/{session['id']}/messages",
                json={"prompt": "Add a comment at the top saying '# Modified by AI'"}
            )
            assert message_resp.status_code == 200
            result = message_resp.json()
    
            print(f"Running: vibecode with patch prompt")
            print(f"Result: patch={bool(result.get('patch'))}, diff_id={result.get('diff_id')}")
            print(f"Token usage: {result.get('token_usage', {})}")
            print(f"Expected: patch should be created")
    
            # Verify response
            assert result.get("error") is None, f"Error: {result.get('error')}"
>           assert result.get("diff_id") or result.get("patch"), "Should have diff_id or patch"
E           AssertionError: Should have diff_id or patch
E           assert (None or None)
E            +  where None = <built-in method get of dict object at 0xffff96225740>('diff_id')
E            +    where <built-in method get of dict object at 0xffff96225740> = {'content': 'Which file should I add the comment to? Please provide the target file path (e.g., script.py). If it’s a new file, confirm the name and I’ll create it with the comment at the top.', 'diff_id': None, 'error': None, 'patch': None, ...}.get
E            +  and   None = <built-in method get of dict object at 0xffff96225740>('patch')
E            +    where <built-in method get of dict object at 0xffff96225740> = {'content': 'Which file should I add the comment to? Please provide the target file path (e.g., script.py). If it’s a new file, confirm the name and I’ll create it with the comment at the top.', 'diff_id': None, 'error': None, 'patch': None, ...}.get

tests/integration/test_phase_004_agents.py:75: AssertionError
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:43777/projects "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:43777/projects/890f454e-4376-419f-a697-bca921cc1a4e/sessions "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:43777/sessions/e3c1bae8-c880-4dee-af7c-cb780f0c097d/messages "HTTP/1.1 200 OK"
=============================== warnings summary ===============================
.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
  /home/kuitang/git/vibegrapher/backend/.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

tests/integration/test_phase_004_agents.py:37
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:37: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:94
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:94: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:132
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:132: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:175
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:175: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:234
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:234: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:247
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:247: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
======================== 1 failed, 7 warnings in 52.63s ========================
