============================= test session starts ==============================
platform linux -- Python 3.11.2, pytest-8.3.4, pluggy-1.6.0 -- /home/kuitang/git/vibegrapher/backend/.venv/bin/python3
cachedir: .pytest_cache
rootdir: /home/kuitang/git/vibegrapher/backend
configfile: pyproject.toml
plugins: cov-6.0.0, asyncio-0.25.2, anyio-4.10.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function
collecting ... collected 1 item

tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission Starting isolated test server:
  Database: /tmp/test_vibegrapher_77565297.db
  Port: 59817
  Media: /tmp/test_media_77565297
Database reset and seeded successfully at: sqlite:////tmp/test_vibegrapher_77565297.db
Created project 'Agent Triage System' with git repository
Repository path: media/projects/agent-triage-system
Initial commit: 54b242a9cfb9c056b89f83e42813d7b59766fb00
Created 2 test cases (1 regular, 1 quick test)
Test server ready at http://127.0.0.1:59817
Running: vibecode with patch prompt
Result: patch=False, diff_id=None
Token usage: {'total_tokens': 0}
Expected: patch should be created
FAILEDCleaning up test server...


=================================== FAILURES ===================================
________________________ test_vibecode_patch_submission ________________________

test_server = {'media_path': '/tmp/test_media_77565297', 'test_id': '77565297', 'url': 'http://127.0.0.1:59817'}
caplog = <_pytest.logging.LogCaptureFixture object at 0xffff9a245810>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_vibecode_patch_submission(test_server: dict, caplog: Any) -> None:
        """Test vibecode with patch submission using REAL OpenAI API"""
    
        # Set API key for test
        os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY", "")
        if not os.environ["OPENAI_API_KEY"]:
            pytest.skip("OPENAI_API_KEY not set")
    
        caplog.set_level(logging.INFO)
    
        async with httpx.AsyncClient(base_url=test_server["url"], timeout=30.0) as client:
            # Create project
            project_resp = await client.post("/projects", json={"name": "Test Agent Project"})
            assert project_resp.status_code == 201
            project = project_resp.json()
    
            # Create session
            session_resp = await client.post(f"/projects/{project['id']}/sessions")
            assert session_resp.status_code == 201
            session = session_resp.json()
    
            # Send vibecode request - simple patch that should succeed
            message_resp = await client.post(
                f"/sessions/{session['id']}/messages",
                json={"prompt": "Add a comment at the top saying '# Modified by AI'"}
            )
            assert message_resp.status_code == 200
            result = message_resp.json()
    
            print(f"Running: vibecode with patch prompt")
            print(f"Result: patch={bool(result.get('patch'))}, diff_id={result.get('diff_id')}")
            print(f"Token usage: {result.get('token_usage', {})}")
            print(f"Expected: patch should be created")
    
            # Verify response
            assert result.get("error") is None, f"Error: {result.get('error')}"
>           assert result.get("diff_id") or result.get("patch"), "Should have diff_id or patch"
E           AssertionError: Should have diff_id or patch
E           assert (None or None)
E            +  where None = <built-in method get of dict object at 0xffff9a0762c0>('diff_id')
E            +    where <built-in method get of dict object at 0xffff9a0762c0> = {'content': "It looks like there's still an issue preventing the patch from being submitted. \n\nThe change you requested is straightforward: add a comment `# Modified by AI` at the top of the file. You can manually add this to your code if needed. If you have any more questions or need further assistance, feel free to ask!", 'diff_id': None, 'error': None, 'patch': None, ...}.get
E            +  and   None = <built-in method get of dict object at 0xffff9a0762c0>('patch')
E            +    where <built-in method get of dict object at 0xffff9a0762c0> = {'content': "It looks like there's still an issue preventing the patch from being submitted. \n\nThe change you requested is straightforward: add a comment `# Modified by AI` at the top of the file. You can manually add this to your code if needed. If you have any more questions or need further assistance, feel free to ask!", 'diff_id': None, 'error': None, 'patch': None, ...}.get

tests/integration/test_phase_004_agents.py:75: AssertionError
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:59817/projects "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:59817/projects/83195786-5ee4-4840-892f-f0ab9fb5cd40/sessions "HTTP/1.1 201 Created"
INFO     httpx:_client.py:1740 HTTP Request: POST http://127.0.0.1:59817/sessions/f9a11100-71dc-4f21-819b-747d2b7779c8/messages "HTTP/1.1 200 OK"
=============================== warnings summary ===============================
.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
  /home/kuitang/git/vibegrapher/backend/.venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

tests/integration/test_phase_004_agents.py:37
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:37: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:94
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:94: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:132
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:132: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:175
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:175: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:234
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:234: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

tests/integration/test_phase_004_agents.py:247
  /home/kuitang/git/vibegrapher/backend/tests/integration/test_phase_004_agents.py:247: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.integration

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/integration/test_phase_004_agents.py::test_vibecode_patch_submission
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
======================== 1 failed, 7 warnings in 12.43s ========================
